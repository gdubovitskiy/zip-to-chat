import logging
import re
import zipfile
from pathlib import Path
from typing import Dict, List

from tqdm import tqdm

from src.const import SUPPORTED_EXTENSIONS
from src.logger import configure_logging

configure_logging()
logger = logging.getLogger(__name__)


class RepositoryAnalyzer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–∑ ZIP-–∞—Ä—Ö–∏–≤–∞."""

    def __init__(self, zip_path: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞.

        Args:
            zip_path: –ü—É—Ç—å –∫ ZIP-–∞—Ä—Ö–∏–≤—É —Å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–µ–º.
        """
        self.zip_path = Path(zip_path)
        self._validate_zip_path()

    def _validate_zip_path(self) -> None:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è ZIP-–∞—Ä—Ö–∏–≤–∞."""
        if not self.zip_path.exists():
            logger.error(f"File not found: {self.zip_path}")
            raise FileNotFoundError(f"ZIP archive {self.zip_path} does not exist")

    @staticmethod
    def _build_file_tree(file_list: List[str]) -> Dict:
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤.

        Args:
            file_list: –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –≤ –∞—Ä—Ö–∏–≤–µ.

        Returns:
            –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è.
        """
        file_tree = {}
        for file_path in file_list:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Ñ–∞–π–ª—ã
            if "__MACOSX" in file_path or ".DS_Store" in file_path:
                continue

            parts = [p for p in file_path.split("/") if p]
            current = file_tree
            for part in parts:
                current = current.setdefault(part, {})
        return file_tree

    @staticmethod
    def _generate_tree_view(tree: Dict, prefix: str = "", is_root: bool = True) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ASCII-–≥—Ä–∞—Ñ–∏–∫–∏.

        Args:
            tree: –î—Ä–µ–≤–æ–≤–∏–¥–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤.
            prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ).
            is_root: –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–Ω–µ–≤—ã–º.

        Returns:
            –°—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞.
        """
        lines = []
        items = list(tree.items())
        for i, (name, children) in enumerate(items):
            is_current_last = i == len(items) - 1

            if is_root:
                # –î–ª—è –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                connector = ""
                icon = "üìÅ " if children else "üìÑ "
                lines.append(f"{prefix}{icon}{name}{'/' if children else ''}")
            else:
                # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
                connector = "‚îî‚îÄ‚îÄ " if is_current_last else "‚îú‚îÄ‚îÄ "
                icon = "üìÅ " if children else "üìÑ "
                lines.append(
                    f"{prefix}{connector}{icon}{name}{'/' if children else ''}"
                )

            if children:
                new_prefix = prefix + ("" if is_root or is_current_last else "‚îÇ   ")
                lines.extend(
                    RepositoryAnalyzer._generate_tree_view(
                        children, new_prefix, is_root=False
                    ).splitlines()
                )
        return "\n".join(lines)

    @staticmethod
    def _extract_file_contents(zip_ref: zipfile.ZipFile) -> Dict[str, str]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.

        Args:
            zip_ref: –û—Ç–∫—Ä—ã—Ç—ã–π ZIP-–∞—Ä—Ö–∏–≤.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Ñ–∞–π–ª–æ–≤ (–∏–º—è —Ñ–∞–π–ª–∞ -> —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ).
        """
        contents = {}
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã
        file_list = [
            f
            for f in zip_ref.namelist()
            if any(f.endswith(ext) for ext in SUPPORTED_EXTENSIONS)
            and not ("__MACOSX" in f or ".DS_Store" in f)
        ]

        for file_path in tqdm(file_list, desc="Analyzing files", unit="file"):
            try:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ (–±–µ–∑ –ø—É—Ç–∏ –∞—Ä—Ö–∏–≤–∞)
                clean_name = re.sub(r"^.*?/", "", file_path)
                with zip_ref.open(file_path) as file:
                    content = file.read().decode("utf-8")
                    contents[clean_name] = content
                    logger.debug(f"Read file: {clean_name}")
            except UnicodeDecodeError:
                logger.warning(f"Binary data in file: {clean_name}")
            except Exception as e:
                logger.error(f"Error reading {clean_name}: {str(e)}")
        return contents

    def analyze(self) -> dict:
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è.

        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–∞:
            - structure: —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
            - contents: —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤

        Raises:
            zipfile.BadZipFile: –ï—Å–ª–∏ –∞—Ä—Ö–∏–≤ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.
            Exception: –ü—Ä–∏ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–∫–∞—Ö –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞.
        """
        try:
            with zipfile.ZipFile(self.zip_path, "r") as zip_ref:
                # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                file_tree = self._build_file_tree(zip_ref.namelist())
                tree_view = self._generate_tree_view(file_tree)

                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–æ–≤
                file_contents = self._extract_file_contents(zip_ref)

                return {"structure": tree_view, "contents": file_contents}
        except zipfile.BadZipFile:
            logger.exception("Invalid ZIP file")
            raise
        except Exception as e:
            logger.exception("Unexpected error during analysis")
            raise
